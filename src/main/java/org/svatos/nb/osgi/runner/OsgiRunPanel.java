/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package org.svatos.nb.osgi.runner;

import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.jar.Manifest;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.prefs.BackingStoreException;
import java.util.prefs.Preferences;
import javax.swing.filechooser.FileFilter;
import javax.swing.table.TableColumn;
import org.netbeans.api.project.Project;
import org.openide.filesystems.FileChooserBuilder;
import org.openide.filesystems.FileUtil;
import org.openide.filesystems.JarFileSystem;
import org.openide.util.Exceptions;
import org.openide.util.NbPreferences;

/**
 *
 * @author jiri.svatos
 */
public class OsgiRunPanel extends javax.swing.JPanel {

    
    private final String[] bundles = new String[]{
        "javax.servlet",
        "org.apache.felix.gogo.command",
        "org.apache.felix.gogo.runtime",
        "org.apache.felix.gogo.shell",
        "org.eclipse.equinox.console",
        "org.eclipse.equinox.ds",
        "org.eclipse.equinox.event",
        "org.eclipse.equinox.http.jetty",
        "org.eclipse.equinox.http.servlet",
        "org.eclipse.equinox.util",
        "org.eclipse.jetty.continuation",
        "org.eclipse.jetty.http",
        "org.eclipse.jetty.io",
        "org.eclipse.jetty.security",
        "org.eclipse.jetty.server",
        "org.eclipse.jetty.servlet",
        "org.eclipse.jetty.util",
        "org.eclipse.osgi.services",
        "org.eclipse.osgi.util"};

    private final String vmArgumentsString = "-Dosgi.requiredJavaVersion=1.7 -Xms40m -Xmx512m -Declipse.ignoreApp=true -Dosgi.noShutdown=true -Dorg.osgi.service.log.level=LOG_DEBUG -Dorg.osgi.service.http.port=44444";

    /**
     * Creates new form OsgiRunPanel
     */
    public OsgiRunPanel(Project... projects) {
        this(Arrays.asList(projects));
    }

  
    public OsgiRunPanel(List<Project> projects) {
        try {
            initComponents();
            //
            jTextField1.setText(vmArgumentsString);
            //
            jTextField2.setText(NbPreferences.forModule(getClass()).get("bat", ""));
            jLabel3.setText(NbPreferences.forModule(getClass()).get("platform", ""));

            loadProjectsOSGiTable(findProjectOsgiConfiguration(projects));
            loadExternalLibsTable();
            //
        } catch (BackingStoreException ex) {
            Exceptions.printStackTrace(ex);
        }
    }

    private void loadProjectsOSGiTable(List<ModuleConfiguration> mcs) {
        //
        Preferences prefs = NbPreferences.forModule(getClass());
        //load prefs
        mcs.forEach((mc) -> {
            prefs.getBoolean(mc.getPath(), true);
        });
        final ModulConfigrationTableModel model = new ModulConfigrationTableModel(mcs);
        projectTable.setModel(model);
        //
        TableColumn column = projectTable.getColumnModel().getColumn(0);
        column.setMinWidth(20);
        column.setMaxWidth(20);
        column.setPreferredWidth(20);
    }

    private void loadExternalLibsTable() throws BackingStoreException {
        List<ModuleConfiguration> reList = new ArrayList<ModuleConfiguration>();
        //
        Preferences exLibPrefs = NbPreferences.forModule(getClass()).node("externalLibs");
        String[] externalLibs = exLibPrefs.keys();
        //
        for (String externalLib : externalLibs) {
            reList.add(ExternalModuleConfiguration.createFromJar(externalLib, exLibPrefs.getBoolean(externalLib, true)));
        }
        final ModulConfigrationTableModel model = new ModulConfigrationTableModel(reList);
        externalTable.setModel(model);
        //
        TableColumn column = externalTable.getColumnModel().getColumn(0);
        column.setMinWidth(20);
        column.setMaxWidth(20);
        column.setPreferredWidth(20);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jButton2 = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jScrollPane1 = new javax.swing.JScrollPane();
        projectTable = new javax.swing.JTable();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        externalTable = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        jTextField2 = new javax.swing.JTextField();

        org.openide.awt.Mnemonics.setLocalizedText(jLabel1, org.openide.util.NbBundle.getMessage(OsgiRunPanel.class, "OsgiRunPanel.jLabel1.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(jLabel2, org.openide.util.NbBundle.getMessage(OsgiRunPanel.class, "OsgiRunPanel.jLabel2.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(jLabel3, org.openide.util.NbBundle.getMessage(OsgiRunPanel.class, "OsgiRunPanel.jLabel3.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(jButton2, org.openide.util.NbBundle.getMessage(OsgiRunPanel.class, "OsgiRunPanel.jButton2.text")); // NOI18N
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(jLabel4, org.openide.util.NbBundle.getMessage(OsgiRunPanel.class, "OsgiRunPanel.jLabel4.text")); // NOI18N

        jTextField1.setText(org.openide.util.NbBundle.getMessage(OsgiRunPanel.class, "OsgiRunPanel.jTextField1.text")); // NOI18N

        projectTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(projectTable);

        jTabbedPane1.addTab(org.openide.util.NbBundle.getMessage(OsgiRunPanel.class, "OsgiRunPanel.jScrollPane1.TabConstraints.tabTitle"), jScrollPane1); // NOI18N

        externalTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane2.setViewportView(externalTable);

        org.openide.awt.Mnemonics.setLocalizedText(jButton1, org.openide.util.NbBundle.getMessage(OsgiRunPanel.class, "OsgiRunPanel.jButton1.text")); // NOI18N
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButton1)
                .addContainerGap())
            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 720, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 252, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButton1)
                .addContainerGap())
        );

        jTabbedPane1.addTab(org.openide.util.NbBundle.getMessage(OsgiRunPanel.class, "OsgiRunPanel.jPanel1.TabConstraints.tabTitle"), jPanel1); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(jButton3, org.openide.util.NbBundle.getMessage(OsgiRunPanel.class, "OsgiRunPanel.jButton3.text")); // NOI18N
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(jLabel5, org.openide.util.NbBundle.getMessage(OsgiRunPanel.class, "OsgiRunPanel.jLabel5.text")); // NOI18N

        jTextField2.setText(org.openide.util.NbBundle.getMessage(OsgiRunPanel.class, "OsgiRunPanel.jTextField2.text")); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jTabbedPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel5)
                            .addComponent(jLabel4)
                            .addComponent(jLabel2))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jButton2))
                            .addComponent(jTextField1)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jTextField2)
                                .addGap(18, 18, 18)
                                .addComponent(jButton3)))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 333, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jLabel3)
                    .addComponent(jButton2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton3)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel5)
                        .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        File file = new FileChooserBuilder(getClass() + "/framework")
                .setDirectoriesOnly(true)
                .showOpenDialog();
        if (file == null) {
            return;
        }
        jLabel3.setText(file.getAbsolutePath());
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        try {

            File file = new FileChooserBuilder(getClass() + "/external").setFileFilter(new FileFilter() {
                @Override
                public boolean accept(File f) {
                    if (f.isDirectory()) {
                        return true;
                    }
                    if (!f.getName().endsWith(".jar")) {
                        return false;
                    }
                    try {
                        Manifest manifest = new JarFileSystem(f).getManifest();
                        return null != manifest.getMainAttributes().getValue("Bundle-Name");
                    } catch (IOException ex) {
                        return false;
                    }

                }

                @Override
                public String getDescription() {
                    return "Only jar which contains OSGi manifest";
                }
            }).showOpenDialog();
            //
            if (file.isFile()) {
                processExternalJar(file);
            } else {
                Collections.list(FileUtil.toFileObject(file).getChildren(true)).stream().filter((f) -> {
                    if (!"jar".equals(f.getExt())) {
                        return false;
                    }
                    try {
                        Manifest manifest = new JarFileSystem(FileUtil.toFile(f)).getManifest();
                        return null != manifest.getMainAttributes().getValue("Bundle-Name");
                    } catch (IOException ex) {
                        return false;
                    }
                }).forEach(b -> processExternalJar(FileUtil.toFile(b)));
            }
        } catch (Throwable e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        File file = new FileChooserBuilder(getClass() + "/bat")
                .setDirectoriesOnly(true)
                .showOpenDialog();
        if (file == null) {
            return;
        }
        jTextField2.setText(file.getAbsolutePath());
    }//GEN-LAST:event_jButton3ActionPerformed

    private void processExternalJar(File file) {
        ((ModulConfigrationTableModel) externalTable.getModel()).add(ExternalModuleConfiguration.createFromJar(file.getAbsolutePath()));
        Preferences exLibPrefs = NbPreferences.forModule(getClass()).node("externalLibs");
        exLibPrefs.putBoolean(file.getAbsolutePath(), true);
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable externalTable;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTable projectTable;
    // End of variables declaration//GEN-END:variables

    private List<ModuleConfiguration> findProjectOsgiConfiguration(List<? extends Project> projects) {
        List<ModuleConfiguration> mcs = new ArrayList<>();
        //project
        projects.forEach((project) -> {
            mcs.add(ModuleConfiguration.createFromProject(project));
        });
        //OSGi
        mcs.addAll(findBundles(getPlatform(), bundles));
        return mcs;
    }

    static List<ModuleConfiguration> findBundles(File equinoxPlugins, String... bundles) {
        List<ModuleConfiguration> reList = new ArrayList<>();
        for (String bundle : bundles) {
            File[] list = equinoxPlugins.listFiles((File dir, String name1) -> name1.startsWith(bundle + "-") && name1.endsWith(".jar"));
            if (list.length == 0) {
                throw new IllegalStateException("Bundle not found " + bundle);
            }
            if (list.length > 1) {
                Logger.getLogger(OsgiRunPanel.class.getName()).log(Level.WARNING, "More Bundles found " + Arrays.toString(list));
                throw new IllegalStateException("More bundles found " + bundle);
            }
            final ModuleConfiguration module = OSGiModuleConfiguration.create(list[0].getAbsolutePath());
            reList.add(module);
        }
        return reList;
    }

    List<ModuleConfiguration> getModuleConfigurations() {
        List<ModuleConfiguration> reList = new ArrayList<>();
        reList.addAll(getProjectOSGiModuleConfiguration());
        reList.addAll(getExternalLibsModuleConfiguration());
        return reList;
    }

    private List<ModuleConfiguration> getExternalLibsModuleConfiguration() {
        return ((ModulConfigrationTableModel) externalTable.getModel()).getModuleConfigurations();
    }

    private List<ModuleConfiguration> getProjectOSGiModuleConfiguration() {
        return ((ModulConfigrationTableModel) projectTable.getModel()).getModuleConfigurations();
    }

    public String getVmArgumentsString() {
        return jTextField1.getText();
    }

    void save() {
        getProjectOSGiModuleConfiguration().forEach((mc) -> {
            NbPreferences.forModule(getClass()).putBoolean(mc.getPath(), mc.isEnable());
        });
        getExternalLibsModuleConfiguration().forEach((mc) -> {
            NbPreferences.forModule(getClass()).node("externalLibs").putBoolean(mc.getPath(), mc.isEnable());
        });
         NbPreferences.forModule(getClass()).put("bat", getBat().getAbsolutePath());
         NbPreferences.forModule(getClass()).put("platform", getPlatform().getAbsolutePath());
    }

    File getBat() {
        if(jTextField2.getText().endsWith("OSGi.bat"))return new File(jTextField2.getText());
        return new File(jTextField2.getText(), "OSGi.bat");
    }
    
    File getPlatform(){
        return new File(jLabel3.getText());
    }

}
